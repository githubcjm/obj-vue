{"remainingRequest":"I:\\1905code\\Vue\\obj\\tes\\objcets\\node_modules\\babel-loader\\lib\\index.js!I:\\1905code\\Vue\\obj\\tes\\objcets\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!I:\\1905code\\Vue\\obj\\tes\\objcets\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!I:\\1905code\\Vue\\obj\\tes\\objcets\\src\\views\\Sign.vue?vue&type=script&lang=js&","dependencies":[{"path":"I:\\1905code\\Vue\\obj\\tes\\objcets\\src\\views\\Sign.vue","mtime":1564817059780},{"path":"I:\\1905code\\Vue\\obj\\tes\\objcets\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\1905code\\Vue\\obj\\tes\\objcets\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"I:\\1905code\\Vue\\obj\\tes\\objcets\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\1905code\\Vue\\obj\\tes\\objcets\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      username: \"\",\n      password: \"\"\n    };\n  } //   局部守卫\n  //   beforeRouteEnter(to, from, next) {\n  //     // 在渲染该组件的对应路由被 confirm 前调用\n  //     // 不！能！获取组件实例 `this`\n  //     // 因为当守卫执行前，组件实例还没被创建\n  //   },\n  //   beforeRouteUpdate(to, from, next) {\n  //     // 在当前路由改变，但是该组件被复用时调用\n  //     // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n  //     // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n  //     // 可以访问组件实例 `this`\n  //   },\n  //   beforeRouteLeave(to, from, next) {\n  //     // 导航离开该组件的对应路由时调用\n  //     // 可以访问组件实例 `this`\n  //   }\n\n};",{"version":3,"sources":["Sign.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAAA;AAIA,GANA,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAtBA,CAAA","sourcesContent":["<template name=\"component-name\">\r\n  <div>\r\n    <van-field\r\n      v-model=\"username\"\r\n      required\r\n      clearable\r\n      label=\"用户名\"\r\n      right-icon=\"question-o\"\r\n      placeholder=\"请输入用户名\"\r\n      @click-right-icon=\"$toast('question')\"\r\n    />\r\n\r\n    <van-field v-model=\"password\" type=\"password\" label=\"密码\" placeholder=\"请输入密码\" required />\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\"\r\n    };\r\n  }\r\n  //   局部守卫\r\n  //   beforeRouteEnter(to, from, next) {\r\n  //     // 在渲染该组件的对应路由被 confirm 前调用\r\n  //     // 不！能！获取组件实例 `this`\r\n  //     // 因为当守卫执行前，组件实例还没被创建\r\n  //   },\r\n  //   beforeRouteUpdate(to, from, next) {\r\n  //     // 在当前路由改变，但是该组件被复用时调用\r\n  //     // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\r\n  //     // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\r\n  //     // 可以访问组件实例 `this`\r\n  //   },\r\n  //   beforeRouteLeave(to, from, next) {\r\n  //     // 导航离开该组件的对应路由时调用\r\n  //     // 可以访问组件实例 `this`\r\n  //   }\r\n};\r\n</script>\r\n"],"sourceRoot":"src/views"}]}